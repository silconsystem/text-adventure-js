<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        #frequency-device {
            width: 150px;
            height: 150px;
            position: absolute;
            overflow: hidden;
            border: 2px solid #000;
        }
        #step-display {
            margin-top: 10px;
            cursor: move;
        }
    </style>
</head>
<body>
    <div id="frequency-device">
        <canvas id="canvas" width="150" height="150"></canvas>
        <div id="step-display">Step: 1</div>
    </div>
    
    <button onclick="toggleFrequencyDevice()">Toggle Frequency Device</button>

    <script>
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        const stepDisplay = document.getElementById("step-display");
        const frequencyDevice = document.getElementById("frequency-device");

        const triangleSize = 50; // Size of the triangle
        let rotationStep = 1;
        let isDeviceVisible = false;
        let isDragging = false;
        let offsetX, offsetY;
        
        function setDefaultPosition() {
            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;
            const defaultX = (screenWidth - 150) / 2; // Center horizontally
            const defaultY = 20; // 20px from the top
            frequencyDevice.style.left = defaultX + "px";
            frequencyDevice.style.top = defaultY + "px";
        }
        
        function limitDraggableArea() {
            const maxWidth = 600;
            const maxHeight = 300;
            const currentX = parseFloat(frequencyDevice.style.left);
            const currentY = parseFloat(frequencyDevice.style.top);
            
            if (isNaN(currentX) || isNaN(currentY)) {
                return;
            }
            
            if (currentX < 0) {
                frequencyDevice.style.left = "0px";
            }
            if (currentX > maxWidth) {
                frequencyDevice.style.left = maxWidth + "px";
            }
            if (currentY < 0) {
                frequencyDevice.style.top = "0px";
            }
            if (currentY > maxHeight) {
                frequencyDevice.style.top = maxHeight + "px";
            }
        }

        function drawTriangle(angle) {
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.translate(centerX, centerY);
            ctx.rotate(angle);
            ctx.beginPath();
            ctx.moveTo(0, -triangleSize / 2);
            ctx.lineTo(-triangleSize / 2, triangleSize / 2);
            ctx.lineTo(triangleSize / 2, triangleSize / 2);
            ctx.closePath();
            ctx.fillStyle = "blue";
            ctx.fill();
            ctx.restore();
        }

        function updateStepDisplay() {
            stepDisplay.textContent = `Step: ${rotationStep}`;
        }

        function rotateTriangle(event) {
            const step = event.type === "mousemove" || event.type === "touchmove" ? 1 : 2;
            rotationStep += step;
            if (rotationStep > 12) {
                rotationStep = 1;
            }
            const angle = (rotationStep - 1) * (Math.PI / 6);
            drawTriangle(angle);
            updateStepDisplay();
        }

        canvas.addEventListener("mousemove", rotateTriangle);
        canvas.addEventListener("touchstart", rotateTriangle);
        canvas.addEventListener("touchmove", rotateTriangle);

        function toggleFrequencyDevice() {
            isDeviceVisible = !isDeviceVisible;
            frequencyDevice.style.display = isDeviceVisible ? "block" : "none";
            
            if (isDeviceVisible) {
                setDefaultPosition();
            }
        }

        stepDisplay.addEventListener("mousedown", (e) => {
            isDragging = true;
            offsetX = e.clientX - frequencyDevice.getBoundingClientRect().left;
            offsetY = e.clientY - frequencyDevice.getBoundingClientRect().top;
        });

        stepDisplay.addEventListener("touchstart", (e) => {
            isDragging = true;
            offsetX = e.touches[0].clientX - frequencyDevice.getBoundingClientRect().left;
            offsetY = e.touches[0].clientY - frequencyDevice.getBoundingClientRect().top;
        });

        document.addEventListener("mousemove", (e) => {
            if (isDragging) {
                let x = e.clientX - offsetX;
                let y = e.clientY - offsetY;
                frequencyDevice.style.left = x + "px";
                frequencyDevice.style.top = y + "px";
                limitDraggableArea();
            }
        });

        document.addEventListener("touchmove", (e) => {
            if (isDragging) {
                let x = e.touches[0].clientX - offsetX;
                let y = e.touches[0].clientY - offsetY;
                frequencyDevice.style.left = x + "px";
                frequencyDevice.style.top = y + "px";
                limitDraggableArea();
            }
        });

        document.addEventListener("mouseup", () => {
            isDragging = false;
        });

        document.addEventListener("touchend", () => {
            isDragging = false;
        });

        drawTriangle(0); // Initial drawing
        updateStepDisplay();
    </script>
</body>
</html>


